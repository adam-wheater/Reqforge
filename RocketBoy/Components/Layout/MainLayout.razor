@inherits LayoutComponentBase

@using RocketBoy.Models
@using RocketBoy.Services
@inject CollectionService CollectionService
@inject NavigationManager NavigationManager
@inject OpenApiImportService OpenApiImport
@inject RequestStore RequestStore

<div class="d-flex vh-100">
    <!-- SIDEBAR -->
    <aside class="bg-light border-end" style="width: 250px;">
        <div class="p-4 d-flex flex-column h-100">
            <h5 class="mb-4">🚀 RocketBoy</h5>

            <div class="mb-3">
                <label class="form-label small text-uppercase">Collections</label>
                <select class="form-select"
                        value="@_selectedCollection"
                        @onchange="OnCollectionChanged">
                    <option value="">— All —</option>
                    @foreach (var col in _collections)
                    {
                        <option value="@col.Name">@col.Name</option>
                    }
                </select>
            </div>

            <button class="btn btn-primary w-100 mb-2"
                    @onclick="GoToRequests">
                View Requests
            </button>

            <button class="btn btn-outline-secondary mt-auto w-100"
                    @onclick="@(() => NavigationManager.NavigateTo("/settings"))">
                Settings
            </button>

            <div class="mt-3 pt-3 border-top">
                <h6>Import OpenAPI</h6>
                <InputFile OnChange="ImportOpenApi" class="form-control mb-1" />
                <small class="text-muted">(.json or .yaml)</small>
            </div>
        </div>
    </aside>

    <!-- MAIN CONTENT -->
    <main class="flex-fill p-4 overflow-auto">
        @Body
    </main>
</div>

@code {
    private List<Collection> _collections = new();
    private string? _selectedCollection;

    protected override async Task OnInitializedAsync()
    {
        _collections = await CollectionService.LoadAllAsync();

        // pick up ?collection=… from URL if present
        var uri = new Uri(NavigationManager.Uri);
        var query = uri.Query.TrimStart('?').Split('&', StringSplitOptions.RemoveEmptyEntries);
        foreach (var kv in query)
        {
            var parts = kv.Split('=', 2);
            if (parts.Length == 2 && parts[0] == "collection")
                _selectedCollection = Uri.UnescapeDataString(parts[1]);
        }
    }

    private void OnCollectionChanged(ChangeEventArgs e)
    {
        _selectedCollection = e.Value?.ToString();
        GoToRequests();
    }

    private async Task ImportOpenApi(InputFileChangeEventArgs e)
    {
        using var stream = e.File.OpenReadStream(maxAllowedSize: 10_000_000);
        var imported = await OpenApiImport.ImportAsync(stream);

        // add into the shared store
        RequestStore.AddRange(imported);

        // navigate to the requests page
        NavigationManager.NavigateTo("/requests");
    }

    private void GoToRequests()
    {
        var target = "/requests";
        if (!string.IsNullOrEmpty(_selectedCollection))
            target += $"?collection={Uri.EscapeDataString(_selectedCollection)}";
        NavigationManager.NavigateTo(target);
    }
}
