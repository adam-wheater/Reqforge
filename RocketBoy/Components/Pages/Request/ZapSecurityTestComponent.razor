@using RocketBoy.Components.Pages.Models
@using RocketBoy.Services
@inject IJSRuntime JSRuntime
@inject KeystoreService KeystoreService
@inject ZapService ZapService
@inject ZapSettings ZapSettings

@if (!string.IsNullOrEmpty(ZapApiKey) && !string.IsNullOrEmpty(ZapBaseUrl))
{
    <button class="btn btn-warning d-block w-100" @onclick="StartSecurityTest">Start Security Test</button>
    @if (SecurityTestInProgress)
    {
        <div class="alert alert-info mt-4">
            <h4>Security Test in Progress</h4>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <pre>@SecurityTestProgressOutput</pre>
        </div>
    }
    @if (HasRunSecurityTest && !string.IsNullOrEmpty(SecurityTestOutput))
    {
        <div class="alert alert-success mt-4">
            <h4>Security Test Results</h4>
            <pre>@SecurityTestOutput</pre>
            <button class="btn btn-success d-block w-100 mt-2" @onclick="DownloadSecurityTestResults">Download Results</button>
        </div>
    }
}

@code {
    [Parameter] public RequestObject SelectedTab { get; set; }

    private string ZapApiKey { get; set; } = string.Empty;
    private string ZapBaseUrl { get; set; } = string.Empty;
    private bool SecurityTestInProgress { get; set; } = false;
    private string SecurityTestProgressOutput { get; set; } = string.Empty;
    private string? SecurityTestOutput { get; set; } = null;
    private bool HasRunSecurityTest { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await KeystoreService.LoadKeys();
        ZapApiKey = KeystoreService.GetKey("ZapApiKey") ?? string.Empty;
        ZapBaseUrl = KeystoreService.GetKey("ZapBaseUrl") ?? string.Empty;
    }

    private async Task StartSecurityTest()
    {
        if (SelectedTab == null || string.IsNullOrEmpty(SelectedTab.Url))
        {
            AppendSecurityTestOutput("Security test cannot be started: Invalid input.");
            return;
        }

        SecurityTestInProgress = true;
        SecurityTestProgressOutput = "Security test is starting...\n";
        SecurityTestOutput = null;
        HasRunSecurityTest = false;
        StateHasChanged();

        if (string.IsNullOrEmpty(ZapApiKey) || string.IsNullOrEmpty(ZapBaseUrl))
        {
            AppendSecurityTestOutput("ZAP settings are not properly configured.");
            SecurityTestInProgress = false;
            HasRunSecurityTest = true;
            StateHasChanged();
            return;
        }

        HttpClient httpClient = new();
        var zapService = new ZapService(new ZapSettings { ApiKey = ZapApiKey, BaseUrl = ZapBaseUrl });

        try
        {
            var version = await zapService.GetVersion(httpClient);
            AppendSecurityTestOutput($"Detected ZAP version {version}");
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("alert",
                "Unable to contact OWASP ZAP at " + ZapBaseUrl +
                ".\n\nPlease make sure OWASP ZAP is installed and running (download from https://www.zaproxy.org/download/).");
            SecurityTestInProgress = false;
            HasRunSecurityTest = false;
            return;
        }

        try
        {
            // Add URL to context
            var contextName = "Default Context";
            var addUrlResponse = await zapService.AddUrlToContext(httpClient, contextName, SelectedTab.Url);
            SecurityTestProgressOutput += $"Added URL to context: {addUrlResponse}\n";
            StateHasChanged();

            // Run Spider scan
            var spiderScanId = await zapService.RunSpiderScan(httpClient, SelectedTab.Url);
            SecurityTestProgressOutput += $"Spider scan started: {spiderScanId}\n";
            StateHasChanged();

            bool isSpiderCompleted = false;
            while (!isSpiderCompleted)
            {
                var progress = await zapService.GetSpiderStatus(httpClient, spiderScanId);
                SecurityTestProgressOutput += $"Spider scan progress: {progress}\n";
                StateHasChanged();

                if (progress == "100") { isSpiderCompleted = true; }
                else { await Task.Delay(5000); }
            }

            // Run Active scan
            var activeScanId = await zapService.StartActiveScan(httpClient, SelectedTab.Url);
            SecurityTestProgressOutput += $"Active scan started: {activeScanId}\n";
            StateHasChanged();

            bool isActiveScanCompleted = false;
            while (!isActiveScanCompleted)
            {
                var progress = await zapService.GetActiveScanStatus(httpClient, activeScanId);
                SecurityTestProgressOutput += $"Active scan progress: {progress}\n";
                StateHasChanged();

                if (progress == "100") { isActiveScanCompleted = true; }
                else { await Task.Delay(5000); }
            }

            var alerts = await zapService.GetAlerts(httpClient, SelectedTab.Url);
            AppendSecurityTestOutput($"Security test completed. Alerts: {alerts}");
            HasRunSecurityTest = true;
        }
        catch (HttpRequestException httpRequestException)
        {
            AppendSecurityTestOutput($"An error occurred during the security test: {httpRequestException.Message}");
            HasRunSecurityTest = true;
        }
        catch (Exception ex)
        {
            AppendSecurityTestOutput($"An unexpected error occurred during the security test: {ex.Message}");
            HasRunSecurityTest = true;
        }

        SecurityTestInProgress = false;
        StateHasChanged();
    }

    private void AppendSecurityTestOutput(string message)
    {
        if (string.IsNullOrEmpty(SecurityTestOutput))
            SecurityTestOutput = message + Environment.NewLine;
        else
            SecurityTestOutput += message + Environment.NewLine;
        StateHasChanged();
    }

    private void DownloadSecurityTestResults()
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(SecurityTestOutput ?? string.Empty);
        var fileName = "security_test_results.txt";
        var mimeType = "text/plain";
        JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(bytes), mimeType);
    }
}