@using RocketBoy.Components.Pages.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IServiceProvider ServiceProvider

@if (ShowLoadTestDialog)
{
    <div class="w-100">
        <EditForm Model="LoadTestFormModel" OnValidSubmit="HandleSubmit">
            <div class="modal show d-block" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Load Test Parameters</h5>
                            <button type="button" class="btn-close" @onclick="ShowDialogFalse"></button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label>Virtual Users</label>
                                <InputNumber @bind-Value="LoadTestFormModel.VirtualUsers" Min="1" Max="1000" class="form-control" />
                                @if (LoadTestFormModel.VirtualUsers < 1)
                                {
                                    <span class="text-danger">Virtual Users must be at least 1</span>
                                }
                            </div>
                            <div class="form-group">
                                <label>Duration</label>
                                <InputText @bind-Value="LoadTestFormModel.Duration" class="form-control" />
                                @if (!Regex.IsMatch(LoadTestFormModel.Duration, @"^\d+(s|m|h)$"))
                                {
                                    <span class="text-danger">Enter a valid duration (e.g., "30s", "1m")</span>
                                }
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary d-block w-100">Start Test</button>
                            <button type="button" class="btn btn-secondary d-block w-100 mt-2" @onclick="ShowDialogFalse">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}
@if (!ShowLoadTestDialog)
{
    <button class="btn btn-primary d-block w-100" @onclick="() => ShowLoadTestDialog = true">Start Load Test</button>
    @if (LoadTestInProgress)
    {
        <div class="alert alert-info mt-4">
            <h4>Load Test in Progress</h4>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <pre>@LoadTestProgressOutput</pre>
        </div>
    }
    @if (HasRunLoadTest && !string.IsNullOrEmpty(LoadTestOutput))
    {
        <div class="alert alert-success mt-4">
            <h4>Load Test Results</h4>
            <pre>@LoadTestOutput</pre>
        </div>
    }
}

@code {
    [Parameter] public RequestObject SelectedTab { get; set; } = default!;
    [Parameter] public LoadTestParameters LoadTestFormModel { get; set; } = new();
    [Parameter] public bool ShowLoadTestDialog { get; set; }
    [Parameter] public bool LoadTestInProgress { get; set; }
    [Parameter] public string LoadTestProgressOutput { get; set; } = string.Empty;
    [Parameter] public string? LoadTestOutput { get; set; }
    [Parameter] public bool HasRunLoadTest { get; set; }

    private async Task ShowDialogFalse()
    {
        ShowLoadTestDialog = false;
    }

    private async Task HandleSubmit(EditContext context)
    {
        await RunLoadTest();
    }

    private async Task RunLoadTest()
    {
        if (SelectedTab == null || LoadTestFormModel.VirtualUsers < 1 || !Regex.IsMatch(LoadTestFormModel.Duration, @"^\d+(s|m|h)$")) return;

        SelectedTab.LoadTestParameters = LoadTestFormModel;
        ShowLoadTestDialog = false;
        LoadTestInProgress = true;
        LoadTestProgressOutput = "Load test is starting...\n";
        LoadTestOutput = null;
        HasRunLoadTest = false;
        string accumulatedLogs = LoadTestProgressOutput;
        StateHasChanged();

        try
        {
            string scriptPath = GenerateTestScript(
                LoadTestFormModel.VirtualUsers,
                LoadTestFormModel.Duration,
                SelectedTab.Url,
                SelectedTab.MethodType,
                System.Text.Json.JsonSerializer.Serialize(SelectedTab.Headers),
                SelectedTab.Body ?? string.Empty
            );

            string k6Command = $"k6 run {scriptPath}";

            var processInfo = new System.Diagnostics.ProcessStartInfo
            {
                FileName = "cmd",
                Arguments = $"/C {k6Command}",
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true,
                StandardOutputEncoding = System.Text.Encoding.UTF8,
                StandardErrorEncoding = System.Text.Encoding.UTF8
            };

            var process = new System.Diagnostics.Process { StartInfo = processInfo };
            process.Start();

            while (!process.HasExited)
            {
                string progressLine = await process.StandardOutput.ReadLineAsync();
                if (!string.IsNullOrEmpty(progressLine))
                {
                    LoadTestProgressOutput += progressLine + "\n";
                    accumulatedLogs += progressLine + "\n";
                    StateHasChanged();
                }
            }

            string remainingOutput = await process.StandardOutput.ReadToEndAsync();
            string errorOutput = await process.StandardError.ReadToEndAsync();

            process.WaitForExit();
            LoadTestInProgress = false;

            accumulatedLogs += remainingOutput + "\n";
            if (!string.IsNullOrEmpty(errorOutput))
            {
                accumulatedLogs += $"Errors occurred:\n{errorOutput}";
            }

            LoadTestOutput = accumulatedLogs;
            HasRunLoadTest = true;
        }
        catch (Exception ex)
        {
            LoadTestOutput = $"An error occurred: {ex.Message}";
            HasRunLoadTest = true;
        }

        StateHasChanged();
    }

    private static string GenerateTestScript(
        int vus, string duration, string url, string method,
        string headersJson, string body)
    {
        string templatePath = System.IO.Path.Combine(AppContext.BaseDirectory, "wwwroot/js/k6_test_template.js");
        string template = System.IO.File.ReadAllText(templatePath);
        string bodyValue = string.IsNullOrEmpty(body) ? "null" : $"'{body}'";
        string script = template
            .Replace("__VUS__", vus.ToString())
            .Replace("__DURATION__", duration)
            .Replace("__URL__", url)
            .Replace("__METHOD__", method)
            .Replace("__HEADERS__", headersJson)
            .Replace("__BODY__", bodyValue);
        string outputScriptPath = System.IO.Path.Combine(FileSystem.AppDataDirectory, "k6_test_script.js");
        System.IO.File.WriteAllText(outputScriptPath, script);

        return outputScriptPath;
    }
}